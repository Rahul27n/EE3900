# -*- coding: utf-8 -*-
"""Gate_Assignment_1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fUGcVvacICt0cROt9FiEUPJj4Oz1Huh2
"""

#Import the required libraries
import numpy as np
from matplotlib import pyplot as plt

#Function to calculate the DFT
def DFT(x):
  N = len(x)
  n = np.arange(N)
  k = n.reshape((N,1))
  e = np.exp(-2j*np.pi*k*n/N)
  X = np.dot(e,x)
  return X

#x[n] is represented as x
#X[k] is represented as X 

x = np.array([3,2,3,4]) 
X_inbuilt = np.fft.fft(np.identity(4)) @ x #np.fft.fft(np.identity(4)) is the 4-point DFT matrix constructed using inbuilt function
X_simulated = DFT(np.identity(4)) @ x #DFT(np.identity(4)) is the 4-point DFT matrix constructed using DFT function
print('Output(X) using inbuilt function:',X_inbuilt)
print('Output(X) using DFT function:',X_simulated)
print('We can observe that both the results are close to each other.')
#x1[n] is represented as x1
#X1[k] is represented as X1

x1 = np.array([3,0,0,2,0,0,3,0,0,4,0,0]) 
X1_inbuilt = np.fft.fft(np.identity(12)) @ x1 #np.fft.fft(np.identity(12)) is the 12-point DFT matrix constructed using inbuilt function
X1_simulated = DFT(np.identity(12)) @ x1 #DFT(np.identity(12)) is the 12-point DFT matrix constructed using DFT function
print('Output(X1) using inbuilt function:',X1_inbuilt)
print('Output(X1) using DFT function:',X1_simulated)
print('We can observe that both the results are close to each other.')
print('We can also observe that Output(X1) is the 3-fold replication of Output(X).')

#Plotting
k = np.array([0,1,2,3])
plt.stem(k,abs(X_inbuilt),use_line_collection=True)
plt.xlabel('k')
plt.ylabel('$|X[k]|$')
plt.grid()
plt.show()

k1 = np.array([0,1,2,3,4,5,6,7,8,9,10,11])
plt.stem(k1,abs(X1_inbuilt),use_line_collection=True)
plt.xlabel('k')
plt.ylabel('$|X_{1}[k]|$')
plt.grid()
plt.show()